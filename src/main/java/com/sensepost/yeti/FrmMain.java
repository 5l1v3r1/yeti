package com.sensepost.yeti;

import java.awt.Component;
import java.awt.event.ActionEvent;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import com.sensepost.yeti.common.ConfigSettings;
import com.sensepost.yeti.common.Globals;
import com.sensepost.yeti.common.Log;
import com.sensepost.yeti.controllers.RunningJob;
import com.sensepost.yeti.controllers.WorkflowController;
import com.sensepost.yeti.gui.DebugDisplay;
import com.sensepost.yeti.gui.DisplayResultIFace;
import com.sensepost.yeti.gui.DomainResults;
import com.sensepost.yeti.gui.HostResults;
import com.sensepost.yeti.gui.IpResults;
import com.sensepost.yeti.gui.NetworkDisplay;
import com.sensepost.yeti.gui.NetworkMapview;
import com.sensepost.yeti.gui.SelectFootprint;
import com.sensepost.yeti.gui.ConfigManager;
import com.sensepost.yeti.models.JobModel;
import com.sensepost.yeti.plugins.CollectorPluginManager;
import com.sensepost.yeti.plugins.ExportPluginManager;
import com.sensepost.yeti.plugins.ImportPluginManager;
import com.sensepost.yeti.plugins.ReportPluginManager;
import java.awt.EventQueue;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author willem
 */
public class FrmMain extends javax.swing.JFrame {

    private NetworkDisplay currentNetworkLayout = null;
    private DebugDisplay currentDebugWindow = null;

    private final NetworkMapview currentNetworkMap = new NetworkMapview();
    private final DomainResults currentDomainResults = new DomainResults();
    private final HostResults currentHostResults = new HostResults();
    private final IpResults currentIpResults = new IpResults();

    private ExportPluginManager exportPlugins = null;
    private ReportPluginManager reportPlugins = null;
    private ImportPluginManager importPlugins = null;
    private CollectorPluginManager collectorPlugins = null;

    private WorkflowController currentWorkflowController = null;

    public FrmMain() {
        if (ConfigSettings.getAlwaysShowConfigAtStartup()) {
            new ConfigManager(this).setVisible(true);
        }

        SelectFootprint sfp = new SelectFootprint();
        sfp.setVisible(true);

        initComponents();
        initControllers();

        int row = 0;
        while (row < tvMenu.getRowCount()) {
            tvMenu.expandRow(row);
            row++;
        }

        btnSetFootprint.setText(Globals.getCurrentFootprintName());
        exportPlugins = new ExportPluginManager();
        reportPlugins = new ReportPluginManager();
        collectorPlugins = new CollectorPluginManager();
        importPlugins = new ImportPluginManager();

        currentNetworkLayout = new NetworkDisplay();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pmDomain = new javax.swing.JPopupMenu();
        pmTLDExpand = new javax.swing.JMenuItem();
        pmHostEnum = new javax.swing.JPopupMenu();
        miForwardLookup = new javax.swing.JMenuItem();
        miReverseLookup = new javax.swing.JMenuItem();
        miCertExtraction = new javax.swing.JMenuItem();
        pmJobs = new javax.swing.JPopupMenu();
        miCancelJob = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        miDeleteJob = new javax.swing.JMenuItem();
        miDeleteAll = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        miSaveJob = new javax.swing.JMenuItem();
        miSaveAllJobResults = new javax.swing.JMenuItem();
        pmCollectors = new javax.swing.JPopupMenu();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel5 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        tpNetwork = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tvMenu = new javax.swing.JTree();
        tpData = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblJobs = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        tpWhereStuffAre = new javax.swing.JTabbedPane();
        pnlNewsFeed = new javax.swing.JPanel();
        tbMenu = new javax.swing.JToolBar();
        btnSetFootprint = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        btnDomainMenu = new javax.swing.JButton();
        btnHostMenu = new javax.swing.JButton();
        btnCollectors = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miChangeFootprint = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miSettings = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        miExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        miImportPlugins = new javax.swing.JMenu();
        miExportPlugins = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        pmTLDExpand.setText("TLD Expand");
        pmTLDExpand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmTLDExpandActionPerformed(evt);
            }
        });
        pmDomain.add(pmTLDExpand);

        miForwardLookup.setText("Forward Lookup");
        miForwardLookup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miForwardLookupActionPerformed(evt);
            }
        });
        pmHostEnum.add(miForwardLookup);

        miReverseLookup.setText("Reverse Lookup");
        miReverseLookup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miReverseLookupActionPerformed(evt);
            }
        });
        pmHostEnum.add(miReverseLookup);

        miCertExtraction.setActionCommand("SSL Extraction");
        miCertExtraction.setLabel("SSL Extraction");
        miCertExtraction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCertExtractionActionPerformed(evt);
            }
        });
        pmHostEnum.add(miCertExtraction);

        miCancelJob.setText("Cancel Jobs");
        miCancelJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCancelJobActionPerformed(evt);
            }
        });
        pmJobs.add(miCancelJob);
        pmJobs.add(jSeparator5);

        miDeleteJob.setText("Delete Job");
        miDeleteJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDeleteJobActionPerformed(evt);
            }
        });
        pmJobs.add(miDeleteJob);

        miDeleteAll.setText("Delete All");
        miDeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDeleteAllActionPerformed(evt);
            }
        });
        pmJobs.add(miDeleteAll);
        pmJobs.add(jSeparator6);

        miSaveJob.setText("Save Job Results");
        miSaveJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveJobActionPerformed(evt);
            }
        });
        pmJobs.add(miSaveJob);

        miSaveAllJobResults.setText("Save All Results");
        miSaveAllJobResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveAllJobResultsActionPerformed(evt);
            }
        });
        pmJobs.add(miSaveAllJobResults);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Yeti - Advanced Footprinting");
        setLocationByPlatform(true);

        jSplitPane2.setBorder(null);
        jSplitPane2.setDividerLocation(300);
        jSplitPane2.setDividerSize(2);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Footprint");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Network View");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Domain Details");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Host Details");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("IP Details");
        treeNode1.add(treeNode2);
        tvMenu.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        tvMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tvMenuMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tvMenu);

        javax.swing.GroupLayout tpNetworkLayout = new javax.swing.GroupLayout(tpNetwork);
        tpNetwork.setLayout(tpNetworkLayout);
        tpNetworkLayout.setHorizontalGroup(
            tpNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tpNetworkLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addContainerGap())
        );
        tpNetworkLayout.setVerticalGroup(
            tpNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tpNetworkLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        jTabbedPane2.addTab("Network", tpNetwork);

        tblJobs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblJobs.setComponentPopupMenu(pmJobs);
        tblJobs.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblJobs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblJobsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblJobs);

        javax.swing.GroupLayout tpDataLayout = new javax.swing.GroupLayout(tpData);
        tpData.setLayout(tpDataLayout);
        tpDataLayout.setHorizontalGroup(
            tpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
        );
        tpDataLayout.setVerticalGroup(
            tpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Current jobs", tpData);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jSplitPane2.setLeftComponent(jPanel5);

        javax.swing.GroupLayout pnlNewsFeedLayout = new javax.swing.GroupLayout(pnlNewsFeed);
        pnlNewsFeed.setLayout(pnlNewsFeedLayout);
        pnlNewsFeedLayout.setHorizontalGroup(
            pnlNewsFeedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 560, Short.MAX_VALUE)
        );
        pnlNewsFeedLayout.setVerticalGroup(
            pnlNewsFeedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 522, Short.MAX_VALUE)
        );

        tpWhereStuffAre.addTab("Results", pnlNewsFeed);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpWhereStuffAre)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpWhereStuffAre)
        );

        jSplitPane2.setRightComponent(jPanel6);

        tbMenu.setFloatable(false);
        tbMenu.setRollover(true);

        btnSetFootprint.setText("Not Selected");
        btnSetFootprint.setFocusable(false);
        btnSetFootprint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSetFootprint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSetFootprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetFootprintActionPerformed(evt);
            }
        });
        tbMenu.add(btnSetFootprint);
        tbMenu.add(jSeparator4);

        btnDomainMenu.setText("Domain Enumeration");
        btnDomainMenu.setFocusable(false);
        btnDomainMenu.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDomainMenu.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDomainMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDomainMenuMouseClicked(evt);
            }
        });
        tbMenu.add(btnDomainMenu);

        btnHostMenu.setText("Host Enumeration");
        btnHostMenu.setFocusable(false);
        btnHostMenu.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnHostMenu.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnHostMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHostMenuMouseClicked(evt);
            }
        });
        btnHostMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHostMenuActionPerformed(evt);
            }
        });
        tbMenu.add(btnHostMenu);

        btnCollectors.setText("Collectors");
        btnCollectors.setFocusable(false);
        btnCollectors.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCollectors.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCollectors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCollectorsActionPerformed(evt);
            }
        });
        tbMenu.add(btnCollectors);

        jMenu1.setText("File");

        miChangeFootprint.setText("Change Footprint");
        miChangeFootprint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                miChangeFootprintMouseClicked(evt);
            }
        });
        miChangeFootprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miChangeFootprintActionPerformed(evt);
            }
        });
        jMenu1.add(miChangeFootprint);
        jMenu1.add(jSeparator1);

        miSettings.setText("Settings");
        miSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSettingsActionPerformed(evt);
            }
        });
        jMenu1.add(miSettings);
        jMenu1.add(jSeparator3);

        miExit.setText("Exit");
        jMenu1.add(miExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Data");

        miImportPlugins.setText("Import");
        miImportPlugins.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                miImportPluginsMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
        });
        jMenu2.add(miImportPlugins);

        miExportPlugins.setText("Export");
        miExportPlugins.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                miExportPluginsMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
        });
        jMenu2.add(miExportPlugins);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Tools");
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Help");
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tbMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane2))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initControllers() {
        currentWorkflowController = new WorkflowController(this);
        tblJobs.setModel(currentWorkflowController.getModel());
        currentDebugWindow = Log.getDebugWindow();
    }

    protected void resetScreens() {
        currentNetworkLayout.buildDomainView();
        setJobDetail(currentNetworkLayout);
        currentDomainResults.loadData();
        currentHostResults.loadData();
        currentIpResults.loadData();
    }

    public void setJobDetail(DisplayResultIFace frame) {
        if (tpWhereStuffAre.getComponentCount() == 2) {
            tpWhereStuffAre.remove(1);
        }
        tpWhereStuffAre.add((Component) frame);
        tpWhereStuffAre.setSelectedIndex(1);
        tpWhereStuffAre.updateUI();
    }

    private void btnSetFootprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetFootprintActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to change footprints?", "Confirmation", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            if (JOptionPane.showConfirmDialog(null, "Are you sure you want to save all open jobs?", "Confirmation", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                currentWorkflowController.saveAllJobs();
            }
            new SelectFootprint().setVisible(true);
            btnSetFootprint.setText(Globals.getCurrentFootprintName());
            currentWorkflowController.removeAllJobs();
            resetScreens();
        }
    }//GEN-LAST:event_btnSetFootprintActionPerformed

    private void btnDomainMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDomainMenuMouseClicked
        pmDomain.show(tbMenu, (int) btnDomainMenu.getLocation().getX(), btnDomainMenu.getLocation().y + btnDomainMenu.getHeight());
    }//GEN-LAST:event_btnDomainMenuMouseClicked

    private void pmTLDExpandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmTLDExpandActionPerformed
        startDomainExpansion();
    }//GEN-LAST:event_pmTLDExpandActionPerformed

    private void tblJobsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblJobsMouseClicked
        RunningJob job = ((JobModel) tblJobs.getModel()).getObjectAt(tblJobs.getSelectedRow());
        job.viewJob();
    }//GEN-LAST:event_tblJobsMouseClicked

    private void btnHostMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHostMenuMouseClicked
        pmHostEnum.show(tbMenu, (int) btnHostMenu.getLocation().getX(), btnHostMenu.getLocation().y + btnHostMenu.getHeight());
    }//GEN-LAST:event_btnHostMenuMouseClicked

    private void miForwardLookupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miForwardLookupActionPerformed
        currentWorkflowController.startForwardLookup();
    }//GEN-LAST:event_miForwardLookupActionPerformed

    private void miReverseLookupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miReverseLookupActionPerformed
        currentWorkflowController.startReverseLookup();
    }//GEN-LAST:event_miReverseLookupActionPerformed

    private void miCertExtractionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCertExtractionActionPerformed
        currentWorkflowController.startCertExtraction();
    }//GEN-LAST:event_miCertExtractionActionPerformed

    private void miCancelJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCancelJobActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to cancel this job?", "Confirmation",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            currentWorkflowController.cancelJob(tblJobs.getSelectedRow());
        }
    }//GEN-LAST:event_miCancelJobActionPerformed

    private void miDeleteJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDeleteJobActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this job?", "Confirmation",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            currentWorkflowController.removeJob(tblJobs.getSelectedRow());
        }
        setJobDetail(currentNetworkLayout);
    }//GEN-LAST:event_miDeleteJobActionPerformed

    private void miDeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDeleteAllActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this job?", "Confirmation",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            currentWorkflowController.removeJob(tblJobs.getSelectedRow());
        }
        setJobDetail(currentNetworkLayout);
    }//GEN-LAST:event_miDeleteAllActionPerformed

    private void miSaveJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveJobActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to save this job?", "Confirmation",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            currentWorkflowController.saveJob(tblJobs.getSelectedRow());
        }
    }//GEN-LAST:event_miSaveJobActionPerformed

    private void miSaveAllJobResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveAllJobResultsActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to save all open jobs?", "Confirmation",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            currentWorkflowController.saveAllJobs();
        }
    }//GEN-LAST:event_miSaveAllJobResultsActionPerformed

    private void tvMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tvMenuMouseClicked
        if (tvMenu.getLastSelectedPathComponent() != null) {
            String itemSelected = tvMenu.getLastSelectedPathComponent().toString();
            if (itemSelected.compareTo("Domain Details") == 0) {
                setJobDetail(currentDomainResults);
            } else if (itemSelected.compareTo("Network View") == 0) {
                setJobDetail(currentNetworkLayout);
                currentNetworkLayout.refreshView();
            } else if (itemSelected.compareTo("Host Details") == 0) {
                setJobDetail(currentHostResults);
                currentHostResults.loadData();
            } else if (itemSelected.compareTo("IP Details") == 0) {
                setJobDetail(currentIpResults);
                currentIpResults.loadData();
            }
        }
    }//GEN-LAST:event_tvMenuMouseClicked

    private void miSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSettingsActionPerformed
        new ConfigManager(this).setVisible(true);
    }//GEN-LAST:event_miSettingsActionPerformed

    private void pluginMenuEvent(ActionEvent evt) {
        if (evt.getSource().getClass() == JMenuItem.class) {
            String scriptName = (((JMenuItem) evt.getSource()).getName());
            currentWorkflowController.startCollector(scriptName);
        }
    }

    private void btnCollectorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCollectorsActionPerformed
        pmCollectors.removeAll();
        for (JMenuItem mi : collectorPlugins.getPlugins()) {
            mi.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    pluginMenuEvent(evt);
                }
            });
            pmCollectors.add(mi);
        }
        pmCollectors.show(tbMenu, (int) btnCollectors.getLocation().getX(), btnCollectors.getLocation().y + btnCollectors.getHeight());

    }//GEN-LAST:event_btnCollectorsActionPerformed

    private void btnHostMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHostMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnHostMenuActionPerformed

    private void miImportPluginsMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_miImportPluginsMenuSelected
        miImportPlugins.removeAll();
        for (JMenuItem mi : importPlugins.getPlugins()) {
            miImportPlugins.add(mi);
        }
    }//GEN-LAST:event_miImportPluginsMenuSelected

    private void miExportPluginsMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_miExportPluginsMenuSelected
        miExportPlugins.removeAll();
        for (JMenuItem mi : exportPlugins.getPlugins()) {
            miExportPlugins.add(mi);
        }
    }//GEN-LAST:event_miExportPluginsMenuSelected

    private void miChangeFootprintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_miChangeFootprintMouseClicked
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to change footprints?", "Confirmation", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            if (JOptionPane.showConfirmDialog(null, "Are you sure you want to save all open jobs?", "Confirmation", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                currentWorkflowController.saveAllJobs();
            }
            new SelectFootprint().setVisible(true);
            btnSetFootprint.setText(Globals.getCurrentFootprintName());
            currentWorkflowController.removeAllJobs();
            resetScreens();
        }
    }//GEN-LAST:event_miChangeFootprintMouseClicked

    private void miChangeFootprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miChangeFootprintActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to change footprints?", "Confirmation", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            if (JOptionPane.showConfirmDialog(null, "Are you sure you want to save all open jobs?", "Confirmation", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                currentWorkflowController.saveAllJobs();
            }
            new SelectFootprint().setVisible(true);
            btnSetFootprint.setText(Globals.getCurrentFootprintName());
            currentWorkflowController.removeAllJobs();
            resetScreens();
        }
    }//GEN-LAST:event_miChangeFootprintActionPerformed

    public void changeDatabase(String dbName) {
        new SelectFootprint().setVisible(true);
        btnSetFootprint.setText(Globals.getCurrentFootprintName());
        resetScreens();
    }

    private void startDomainExpansion() {
        currentWorkflowController.startTLDExpand();
    }

    private void startUpdate() {

        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    ConfigSettings.initConfig(System.getProperty("user.dir"));
                } catch (IOException ex) {
                    Logger.getLogger("FrmMain.FrmMain").log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FrmMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCollectors;
    private javax.swing.JButton btnDomainMenu;
    private javax.swing.JButton btnHostMenu;
    private javax.swing.JButton btnSetFootprint;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JMenuItem miCancelJob;
    private javax.swing.JMenuItem miCertExtraction;
    private javax.swing.JMenuItem miChangeFootprint;
    private javax.swing.JMenuItem miDeleteAll;
    private javax.swing.JMenuItem miDeleteJob;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenu miExportPlugins;
    private javax.swing.JMenuItem miForwardLookup;
    private javax.swing.JMenu miImportPlugins;
    private javax.swing.JMenuItem miReverseLookup;
    private javax.swing.JMenuItem miSaveAllJobResults;
    private javax.swing.JMenuItem miSaveJob;
    private javax.swing.JMenuItem miSettings;
    private javax.swing.JPopupMenu pmCollectors;
    private javax.swing.JPopupMenu pmDomain;
    private javax.swing.JPopupMenu pmHostEnum;
    private javax.swing.JPopupMenu pmJobs;
    private javax.swing.JMenuItem pmTLDExpand;
    private javax.swing.JPanel pnlNewsFeed;
    private javax.swing.JToolBar tbMenu;
    private javax.swing.JTable tblJobs;
    private javax.swing.JPanel tpData;
    private javax.swing.JPanel tpNetwork;
    private javax.swing.JTabbedPane tpWhereStuffAre;
    private javax.swing.JTree tvMenu;
    // End of variables declaration//GEN-END:variables
}
